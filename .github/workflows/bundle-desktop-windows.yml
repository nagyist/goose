name: "Bundle Desktop (Windows)"

on:
  workflow_call:
    inputs:
      signing:
        description: 'Whether to sign the Windows executable'
        required: false
        type: boolean
        default: false
    secrets:
      WINDOWS_CERTIFICATE:
        required: false
      WINDOWS_CERTIFICATE_PASSWORD:
        required: false

# Add concurrency limits
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  # Cache electron downloads
  ELECTRON_CACHE: ${{ github.workspace }}/.cache/electron
  ELECTRON_BUILDER_CACHE: ${{ github.workspace }}/.cache/electron-builder

jobs:
  build-desktop-windows:
    name: Build Desktop (Windows)
    runs-on: windows-latest

    steps:
      # 1) Check out source
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) Get optimal number of CPU cores for build
      - name: Get optimal CPU cores
        id: cpu-cores
        run: |
          $cores = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors
          # Use cores-1 to leave room for system
          $optimal = [Math]::Max(1, $cores - 1)
          echo "BUILD_CORES=$optimal" >> $env:GITHUB_ENV

      # 3) Set up Rust with specific target and components
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-gnu
          components: rustfmt, clippy

      # 4) Improved Rust caching with more granular keys
      - name: Cache Rust
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
            # Add Rust build artifacts
            target/x86_64-pc-windows-gnu/release/
            target/x86_64-pc-windows-gnu/release/deps/
            target/x86_64-pc-windows-gnu/release/build/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock', '**/Cargo.toml', 'rust-toolchain.toml') }}-v1
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}-v1
            ${{ runner.os }}-cargo-

      # 5) Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 'lts/*'

      # 6) Cache node_modules and electron with improved keys
      - name: Cache node_modules and electron
        uses: actions/cache@v3
        with:
          path: |
            node_modules
            ui/desktop/node_modules
            ${{ github.workspace }}/.cache/electron
            ${{ github.workspace }}/.cache/electron-builder
            # Add npm cache
            ~/.npm
          key: ${{ runner.os }}-build-desktop-windows-${{ hashFiles('**/package-lock.json', '**/package.json') }}-v1
          restore-keys: |
            ${{ runner.os }}-build-desktop-windows-${{ hashFiles('**/package-lock.json') }}-v1
            ${{ runner.os }}-build-desktop-windows-

      # 7) Install top-level dependencies if a package.json is in root
      - name: Install top-level deps
        run: |
          if (Test-Path package.json) {
            npm install
          }

      # 8) Improved MinGW toolchain caching
      - name: Cache MinGW
        uses: actions/cache@v3
        with:
          path: |
            C:\ProgramData\chocolatey\lib\mingw
            C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin
            # Add specific DLL paths
            C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\x86_64-w64-mingw32\lib
          key: ${{ runner.os }}-mingw-8.1.0-${{ hashFiles('.github/workflows/bundle-desktop-windows.yml') }}-v1
          restore-keys: |
            ${{ runner.os }}-mingw-8.1.0-v1

      - name: Install MinGW dependencies
        run: |
          if (!(Test-Path "C:\ProgramData\chocolatey\lib\mingw")) {
            Write-Host "Installing MinGW..."
            choco install mingw --version=8.1.0 --no-progress
          } else {
            Write-Host "Using cached MinGW installation"
          }
          
          # Verify MinGW installation
          Write-Host "Verifying MinGW installation..."
          $requiredDlls = @(
            "libstdc++-6.dll",
            "libgcc_s_seh-1.dll",
            "libwinpthread-1.dll"
          )
          
          $mingwPath = "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin"
          $missingDlls = $false
          
          foreach ($dll in $requiredDlls) {
            if (!(Test-Path "$mingwPath\$dll")) {
              Write-Host "Missing required DLL: $dll"
              $missingDlls = $true
            }
          }
          
          if ($missingDlls) {
            Write-Error "MinGW installation is incomplete"
            exit 1
          }

      # 9) Optimized Cargo build for Windows with dynamic parallel jobs
      - name: Cargo build for Windows
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true  # Use git CLI for better performance
          CARGO_BUILD_JOBS: ${{ env.BUILD_CORES }}
        run: |
          Write-Host "Building with $env:CARGO_BUILD_JOBS cores"
          cargo build --release --target x86_64-pc-windows-gnu -j $env:CARGO_BUILD_JOBS

      # 10) Check that the compiled goosed.exe exists and copy exe/dll to ui/desktop/src/bin
      - name: Prepare Windows binary and DLLs
        run: |
          if (!(Test-Path .\target\x86_64-pc-windows-gnu\release\goosed.exe)) {
            Write-Error "Windows binary not found."; exit 1;
          }
          Write-Host "Copying Windows binary and DLLs to ui/desktop/src/bin..."
          if (!(Test-Path ui\desktop\src\bin)) {
            New-Item -ItemType Directory -Path ui\desktop\src\bin | Out-Null
          }
          Copy-Item .\target\x86_64-pc-windows-gnu\release\goosed.exe ui\desktop\src\bin\
          
          # Use cached MinGW DLLs
          $mingwPath = "C:\ProgramData\chocolatey\lib\mingw\tools\install\mingw64\bin"
          Write-Host "Copying MinGW DLLs from $mingwPath"
          Copy-Item "$mingwPath\libstdc++-6.dll" ui\desktop\src\bin\
          Copy-Item "$mingwPath\libgcc_s_seh-1.dll" ui\desktop\src\bin\
          Copy-Item "$mingwPath\libwinpthread-1.dll" ui\desktop\src\bin\
          
          # Copy any additional DLLs from the release directory
          Get-ChildItem .\target\x86_64-pc-windows-gnu\release\*.dll | ForEach-Object {
            Write-Host "Copying additional DLL: $($_.Name)"
            Copy-Item $_.FullName ui\desktop\src\bin\
          }

      # 11) Install & build UI desktop with parallel processing
      - name: Build desktop UI with npm
        run: |
          cd ui\desktop
          npm install --prefer-offline --no-audit
          npm run bundle:windows

      # 12) Copy exe/dll to final out/Goose-win32-x64/resources/bin
      - name: Copy exe/dll to out folder
        run: |
          cd ui\desktop
          if (!(Test-Path .\out\Goose-win32-x64\resources\bin)) {
            New-Item -ItemType Directory -Path .\out\Goose-win32-x64\resources\bin | Out-Null
          }
          Copy-Item .\src\bin\goosed.exe .\out\Goose-win32-x64\resources\bin\
          Get-ChildItem .\src\bin\*.dll | ForEach-Object {
            Write-Host "Copying to output: $($_.Name)"
            Copy-Item $_.FullName .\out\Goose-win32-x64\resources\bin\
          }

      # 13) Code signing (if enabled)
      - name: Sign Windows executable
        if: inputs.signing && inputs.signing == true
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          # Create a temporary certificate file
          $certBytes = [Convert]::FromBase64String($env:WINDOWS_CERTIFICATE)
          $certPath = Join-Path -Path $env:RUNNER_TEMP -ChildPath "certificate.pfx"
          [IO.File]::WriteAllBytes($certPath, $certBytes)
          
          # Sign the main executable
          $signtool = "C:\Program Files (x86)\Windows Kits\10\bin\10.0.17763.0\x64\signtool.exe"
          & $signtool sign /f $certPath /p $env:WINDOWS_CERTIFICATE_PASSWORD /tr http://timestamp.digicert.com /td sha256 /fd sha256 "ui\desktop\out\Goose-win32-x64\Goose.exe"
          
          # Clean up the certificate
          Remove-Item -Path $certPath

      # 14) Upload the final Windows build
      - name: Upload Windows build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: desktop-windows-dist
          path: ui/desktop/out/Goose-win32-x64/